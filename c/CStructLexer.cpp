
// Generated from ./CStruct.g4 by ANTLR 4.13.2


#include "CStructLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CStructLexerStaticData final {
  CStructLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CStructLexerStaticData(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData(CStructLexerStaticData&&) = delete;
  CStructLexerStaticData& operator=(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData& operator=(CStructLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cstructlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CStructLexerStaticData> cstructlexerLexerStaticData = nullptr;

void cstructlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cstructlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cstructlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CStructLexerStaticData>(
    std::vector<std::string>{
      "T__0", "Auto", "Char", "Const", "Double", "Enum", "Extern", "Float", 
      "Int", "Long", "Register", "Restrict", "Short", "Signed", "Static", 
      "Struct", "Typedef", "Union", "Unsigned", "Void", "Volatile", "LeftParen", 
      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
      "LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
      "Star", "Div", "Mod", "And", "Or", "Caret", "Tilde", "Colon", "Semi", 
      "Comma", "Ellipsis", "Identifier", "IdentifierNondigit", "Nondigit", 
      "Digit", "UniversalCharacterName", "HexQuad", "IntegerConstant", "BinaryConstant", 
      "DecimalConstant", "OctalConstant", "HexadecimalConstant", "HexadecimalPrefix", 
      "NonzeroDigit", "OctalDigit", "HexadecimalDigit", "IntegerSuffix", 
      "UnsignedSuffix", "LongSuffix", "LongLongSuffix", "FractionalConstant", 
      "ExponentPart", "Sign", "DigitSequence", "BinaryExponentPart", "HexadecimalDigitSequence", 
      "CChar", "EscapeSequence", "SimpleEscapeSequence", "OctalEscapeSequence", 
      "HexadecimalEscapeSequence", "MultiLineMacroDefine", "MultiLineMacro", 
      "DirectiveDefine", "Directive", "Whitespace", "Newline", "LINE_CONTINUATION", 
      "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'='", "'auto'", "'char'", "'const'", "'double'", "'enum'", "'extern'", 
      "'float'", "'int'", "'long'", "'register'", "'restrict'", "'short'", 
      "'signed'", "'static'", "'struct'", "'typedef'", "'union'", "'unsigned'", 
      "'void'", "'volatile'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
      "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
      "'&'", "'|'", "'^'", "'~'", "':'", "';'", "','", "'...'"
    },
    std::vector<std::string>{
      "", "", "Auto", "Char", "Const", "Double", "Enum", "Extern", "Float", 
      "Int", "Long", "Register", "Restrict", "Short", "Signed", "Static", 
      "Struct", "Typedef", "Union", "Unsigned", "Void", "Volatile", "LeftParen", 
      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
      "LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
      "Star", "Div", "Mod", "And", "Or", "Caret", "Tilde", "Colon", "Semi", 
      "Comma", "Ellipsis", "Identifier", "IntegerConstant", "MultiLineMacroDefine", 
      "MultiLineMacro", "DirectiveDefine", "Directive", "Whitespace", "Newline", 
      "LINE_CONTINUATION", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,55,656,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,1,1,
  	1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
  	1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
  	1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
  	1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
  	1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,5,44,357,8,44,10,44,12,44,360,
  	9,44,1,45,1,45,3,45,364,8,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,48,1,48,3,48,380,8,48,1,49,1,49,1,49,1,49,1,49,
  	1,50,1,50,3,50,389,8,50,1,50,1,50,3,50,393,8,50,1,50,1,50,3,50,397,8,
  	50,1,50,1,50,1,50,1,50,1,50,3,50,404,8,50,1,51,1,51,1,51,4,51,409,8,51,
  	11,51,12,51,410,1,52,1,52,5,52,415,8,52,10,52,12,52,418,9,52,1,53,1,53,
  	5,53,422,8,53,10,53,12,53,425,9,53,1,54,1,54,4,54,429,8,54,11,54,12,54,
  	430,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,444,8,
  	59,1,59,1,59,1,59,1,59,1,59,3,59,451,8,59,1,59,1,59,3,59,455,8,59,3,59,
  	457,8,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,3,62,467,8,62,1,63,3,
  	63,470,8,63,1,63,1,63,1,63,1,63,1,63,3,63,477,8,63,1,64,1,64,3,64,481,
  	8,64,1,64,1,64,1,65,1,65,1,66,4,66,488,8,66,11,66,12,66,489,1,67,1,67,
  	3,67,494,8,67,1,67,1,67,1,68,4,68,499,8,68,11,68,12,68,500,1,69,1,69,
  	3,69,505,8,69,1,70,1,70,1,70,1,70,3,70,511,8,70,1,71,1,71,1,71,1,72,1,
  	72,1,72,3,72,519,8,72,1,72,3,72,522,8,72,1,73,1,73,1,73,1,73,4,73,528,
  	8,73,11,73,12,73,529,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,
  	541,8,74,10,74,12,74,544,9,74,1,74,1,74,3,74,548,8,74,1,74,4,74,551,8,
  	74,11,74,12,74,552,1,74,4,74,556,8,74,11,74,12,74,557,1,75,1,75,1,75,
  	5,75,563,8,75,10,75,12,75,566,9,75,1,75,1,75,3,75,570,8,75,1,75,4,75,
  	573,8,75,11,75,12,75,574,1,75,4,75,578,8,75,11,75,12,75,579,1,75,1,75,
  	1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,593,8,76,10,76,12,76,
  	596,9,76,1,77,1,77,1,77,5,77,601,8,77,10,77,12,77,604,9,77,1,77,1,77,
  	1,78,4,78,609,8,78,11,78,12,78,610,1,78,1,78,1,79,1,79,3,79,617,8,79,
  	1,79,3,79,620,8,79,1,79,1,79,1,80,1,80,3,80,626,8,80,1,80,1,80,1,80,1,
  	80,1,81,1,81,1,81,1,81,5,81,636,8,81,10,81,12,81,639,9,81,1,81,1,81,1,
  	81,1,81,1,81,1,82,1,82,1,82,1,82,5,82,650,8,82,10,82,12,82,653,9,82,1,
  	82,1,82,3,542,564,637,0,83,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
  	89,45,91,0,93,0,95,0,97,0,99,0,101,46,103,0,105,0,107,0,109,0,111,0,113,
  	0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,137,
  	0,139,0,141,0,143,0,145,0,147,0,149,47,151,48,153,49,155,50,157,51,159,
  	52,161,53,163,54,165,55,1,0,19,3,0,65,90,95,95,97,122,1,0,48,57,2,0,66,
  	66,98,98,1,0,48,49,2,0,88,88,120,120,1,0,49,57,1,0,48,55,3,0,48,57,65,
  	70,97,102,2,0,85,85,117,117,2,0,76,76,108,108,2,0,69,69,101,101,2,0,43,
  	43,45,45,2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,92,10,0,34,34,39,
  	39,63,63,92,92,97,98,102,102,110,110,114,114,116,116,118,118,1,0,10,10,
  	2,0,9,9,32,32,1,0,13,13,2,0,10,10,13,13,678,0,1,1,0,0,0,0,3,1,0,0,0,0,
  	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
  	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
  	0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
  	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
  	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
  	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
  	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
  	0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
  	0,101,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,
  	0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,
  	1,167,1,0,0,0,3,169,1,0,0,0,5,174,1,0,0,0,7,179,1,0,0,0,9,185,1,0,0,0,
  	11,192,1,0,0,0,13,197,1,0,0,0,15,204,1,0,0,0,17,210,1,0,0,0,19,214,1,
  	0,0,0,21,219,1,0,0,0,23,228,1,0,0,0,25,237,1,0,0,0,27,243,1,0,0,0,29,
  	250,1,0,0,0,31,257,1,0,0,0,33,264,1,0,0,0,35,272,1,0,0,0,37,278,1,0,0,
  	0,39,287,1,0,0,0,41,292,1,0,0,0,43,301,1,0,0,0,45,303,1,0,0,0,47,305,
  	1,0,0,0,49,307,1,0,0,0,51,309,1,0,0,0,53,311,1,0,0,0,55,313,1,0,0,0,57,
  	316,1,0,0,0,59,319,1,0,0,0,61,321,1,0,0,0,63,324,1,0,0,0,65,326,1,0,0,
  	0,67,329,1,0,0,0,69,331,1,0,0,0,71,333,1,0,0,0,73,335,1,0,0,0,75,337,
  	1,0,0,0,77,339,1,0,0,0,79,341,1,0,0,0,81,343,1,0,0,0,83,345,1,0,0,0,85,
  	347,1,0,0,0,87,349,1,0,0,0,89,353,1,0,0,0,91,363,1,0,0,0,93,365,1,0,0,
  	0,95,367,1,0,0,0,97,379,1,0,0,0,99,381,1,0,0,0,101,403,1,0,0,0,103,405,
  	1,0,0,0,105,412,1,0,0,0,107,419,1,0,0,0,109,426,1,0,0,0,111,432,1,0,0,
  	0,113,435,1,0,0,0,115,437,1,0,0,0,117,439,1,0,0,0,119,456,1,0,0,0,121,
  	458,1,0,0,0,123,460,1,0,0,0,125,466,1,0,0,0,127,476,1,0,0,0,129,478,1,
  	0,0,0,131,484,1,0,0,0,133,487,1,0,0,0,135,491,1,0,0,0,137,498,1,0,0,0,
  	139,504,1,0,0,0,141,510,1,0,0,0,143,512,1,0,0,0,145,515,1,0,0,0,147,523,
  	1,0,0,0,149,531,1,0,0,0,151,559,1,0,0,0,153,583,1,0,0,0,155,597,1,0,0,
  	0,157,608,1,0,0,0,159,619,1,0,0,0,161,623,1,0,0,0,163,631,1,0,0,0,165,
  	645,1,0,0,0,167,168,5,61,0,0,168,2,1,0,0,0,169,170,5,97,0,0,170,171,5,
  	117,0,0,171,172,5,116,0,0,172,173,5,111,0,0,173,4,1,0,0,0,174,175,5,99,
  	0,0,175,176,5,104,0,0,176,177,5,97,0,0,177,178,5,114,0,0,178,6,1,0,0,
  	0,179,180,5,99,0,0,180,181,5,111,0,0,181,182,5,110,0,0,182,183,5,115,
  	0,0,183,184,5,116,0,0,184,8,1,0,0,0,185,186,5,100,0,0,186,187,5,111,0,
  	0,187,188,5,117,0,0,188,189,5,98,0,0,189,190,5,108,0,0,190,191,5,101,
  	0,0,191,10,1,0,0,0,192,193,5,101,0,0,193,194,5,110,0,0,194,195,5,117,
  	0,0,195,196,5,109,0,0,196,12,1,0,0,0,197,198,5,101,0,0,198,199,5,120,
  	0,0,199,200,5,116,0,0,200,201,5,101,0,0,201,202,5,114,0,0,202,203,5,110,
  	0,0,203,14,1,0,0,0,204,205,5,102,0,0,205,206,5,108,0,0,206,207,5,111,
  	0,0,207,208,5,97,0,0,208,209,5,116,0,0,209,16,1,0,0,0,210,211,5,105,0,
  	0,211,212,5,110,0,0,212,213,5,116,0,0,213,18,1,0,0,0,214,215,5,108,0,
  	0,215,216,5,111,0,0,216,217,5,110,0,0,217,218,5,103,0,0,218,20,1,0,0,
  	0,219,220,5,114,0,0,220,221,5,101,0,0,221,222,5,103,0,0,222,223,5,105,
  	0,0,223,224,5,115,0,0,224,225,5,116,0,0,225,226,5,101,0,0,226,227,5,114,
  	0,0,227,22,1,0,0,0,228,229,5,114,0,0,229,230,5,101,0,0,230,231,5,115,
  	0,0,231,232,5,116,0,0,232,233,5,114,0,0,233,234,5,105,0,0,234,235,5,99,
  	0,0,235,236,5,116,0,0,236,24,1,0,0,0,237,238,5,115,0,0,238,239,5,104,
  	0,0,239,240,5,111,0,0,240,241,5,114,0,0,241,242,5,116,0,0,242,26,1,0,
  	0,0,243,244,5,115,0,0,244,245,5,105,0,0,245,246,5,103,0,0,246,247,5,110,
  	0,0,247,248,5,101,0,0,248,249,5,100,0,0,249,28,1,0,0,0,250,251,5,115,
  	0,0,251,252,5,116,0,0,252,253,5,97,0,0,253,254,5,116,0,0,254,255,5,105,
  	0,0,255,256,5,99,0,0,256,30,1,0,0,0,257,258,5,115,0,0,258,259,5,116,0,
  	0,259,260,5,114,0,0,260,261,5,117,0,0,261,262,5,99,0,0,262,263,5,116,
  	0,0,263,32,1,0,0,0,264,265,5,116,0,0,265,266,5,121,0,0,266,267,5,112,
  	0,0,267,268,5,101,0,0,268,269,5,100,0,0,269,270,5,101,0,0,270,271,5,102,
  	0,0,271,34,1,0,0,0,272,273,5,117,0,0,273,274,5,110,0,0,274,275,5,105,
  	0,0,275,276,5,111,0,0,276,277,5,110,0,0,277,36,1,0,0,0,278,279,5,117,
  	0,0,279,280,5,110,0,0,280,281,5,115,0,0,281,282,5,105,0,0,282,283,5,103,
  	0,0,283,284,5,110,0,0,284,285,5,101,0,0,285,286,5,100,0,0,286,38,1,0,
  	0,0,287,288,5,118,0,0,288,289,5,111,0,0,289,290,5,105,0,0,290,291,5,100,
  	0,0,291,40,1,0,0,0,292,293,5,118,0,0,293,294,5,111,0,0,294,295,5,108,
  	0,0,295,296,5,97,0,0,296,297,5,116,0,0,297,298,5,105,0,0,298,299,5,108,
  	0,0,299,300,5,101,0,0,300,42,1,0,0,0,301,302,5,40,0,0,302,44,1,0,0,0,
  	303,304,5,41,0,0,304,46,1,0,0,0,305,306,5,91,0,0,306,48,1,0,0,0,307,308,
  	5,93,0,0,308,50,1,0,0,0,309,310,5,123,0,0,310,52,1,0,0,0,311,312,5,125,
  	0,0,312,54,1,0,0,0,313,314,5,60,0,0,314,315,5,60,0,0,315,56,1,0,0,0,316,
  	317,5,62,0,0,317,318,5,62,0,0,318,58,1,0,0,0,319,320,5,43,0,0,320,60,
  	1,0,0,0,321,322,5,43,0,0,322,323,5,43,0,0,323,62,1,0,0,0,324,325,5,45,
  	0,0,325,64,1,0,0,0,326,327,5,45,0,0,327,328,5,45,0,0,328,66,1,0,0,0,329,
  	330,5,42,0,0,330,68,1,0,0,0,331,332,5,47,0,0,332,70,1,0,0,0,333,334,5,
  	37,0,0,334,72,1,0,0,0,335,336,5,38,0,0,336,74,1,0,0,0,337,338,5,124,0,
  	0,338,76,1,0,0,0,339,340,5,94,0,0,340,78,1,0,0,0,341,342,5,126,0,0,342,
  	80,1,0,0,0,343,344,5,58,0,0,344,82,1,0,0,0,345,346,5,59,0,0,346,84,1,
  	0,0,0,347,348,5,44,0,0,348,86,1,0,0,0,349,350,5,46,0,0,350,351,5,46,0,
  	0,351,352,5,46,0,0,352,88,1,0,0,0,353,358,3,91,45,0,354,357,3,91,45,0,
  	355,357,3,95,47,0,356,354,1,0,0,0,356,355,1,0,0,0,357,360,1,0,0,0,358,
  	356,1,0,0,0,358,359,1,0,0,0,359,90,1,0,0,0,360,358,1,0,0,0,361,364,3,
  	93,46,0,362,364,3,97,48,0,363,361,1,0,0,0,363,362,1,0,0,0,364,92,1,0,
  	0,0,365,366,7,0,0,0,366,94,1,0,0,0,367,368,7,1,0,0,368,96,1,0,0,0,369,
  	370,5,92,0,0,370,371,5,117,0,0,371,372,1,0,0,0,372,380,3,99,49,0,373,
  	374,5,92,0,0,374,375,5,85,0,0,375,376,1,0,0,0,376,377,3,99,49,0,377,378,
  	3,99,49,0,378,380,1,0,0,0,379,369,1,0,0,0,379,373,1,0,0,0,380,98,1,0,
  	0,0,381,382,3,117,58,0,382,383,3,117,58,0,383,384,3,117,58,0,384,385,
  	3,117,58,0,385,100,1,0,0,0,386,388,3,105,52,0,387,389,3,119,59,0,388,
  	387,1,0,0,0,388,389,1,0,0,0,389,404,1,0,0,0,390,392,3,107,53,0,391,393,
  	3,119,59,0,392,391,1,0,0,0,392,393,1,0,0,0,393,404,1,0,0,0,394,396,3,
  	109,54,0,395,397,3,119,59,0,396,395,1,0,0,0,396,397,1,0,0,0,397,404,1,
  	0,0,0,398,404,3,103,51,0,399,400,5,39,0,0,400,401,3,139,69,0,401,402,
  	5,39,0,0,402,404,1,0,0,0,403,386,1,0,0,0,403,390,1,0,0,0,403,394,1,0,
  	0,0,403,398,1,0,0,0,403,399,1,0,0,0,404,102,1,0,0,0,405,406,5,48,0,0,
  	406,408,7,2,0,0,407,409,7,3,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,
  	1,0,0,0,410,411,1,0,0,0,411,104,1,0,0,0,412,416,3,113,56,0,413,415,3,
  	95,47,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,
  	0,417,106,1,0,0,0,418,416,1,0,0,0,419,423,5,48,0,0,420,422,3,115,57,0,
  	421,420,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,108,
  	1,0,0,0,425,423,1,0,0,0,426,428,3,111,55,0,427,429,3,117,58,0,428,427,
  	1,0,0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,110,1,0,0,
  	0,432,433,5,48,0,0,433,434,7,4,0,0,434,112,1,0,0,0,435,436,7,5,0,0,436,
  	114,1,0,0,0,437,438,7,6,0,0,438,116,1,0,0,0,439,440,7,7,0,0,440,118,1,
  	0,0,0,441,443,3,121,60,0,442,444,3,123,61,0,443,442,1,0,0,0,443,444,1,
  	0,0,0,444,457,1,0,0,0,445,446,3,121,60,0,446,447,3,125,62,0,447,457,1,
  	0,0,0,448,450,3,123,61,0,449,451,3,121,60,0,450,449,1,0,0,0,450,451,1,
  	0,0,0,451,457,1,0,0,0,452,454,3,125,62,0,453,455,3,121,60,0,454,453,1,
  	0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,441,1,0,0,0,456,445,1,0,0,0,
  	456,448,1,0,0,0,456,452,1,0,0,0,457,120,1,0,0,0,458,459,7,8,0,0,459,122,
  	1,0,0,0,460,461,7,9,0,0,461,124,1,0,0,0,462,463,5,108,0,0,463,467,5,108,
  	0,0,464,465,5,76,0,0,465,467,5,76,0,0,466,462,1,0,0,0,466,464,1,0,0,0,
  	467,126,1,0,0,0,468,470,3,133,66,0,469,468,1,0,0,0,469,470,1,0,0,0,470,
  	471,1,0,0,0,471,472,5,46,0,0,472,477,3,133,66,0,473,474,3,133,66,0,474,
  	475,5,46,0,0,475,477,1,0,0,0,476,469,1,0,0,0,476,473,1,0,0,0,477,128,
  	1,0,0,0,478,480,7,10,0,0,479,481,3,131,65,0,480,479,1,0,0,0,480,481,1,
  	0,0,0,481,482,1,0,0,0,482,483,3,133,66,0,483,130,1,0,0,0,484,485,7,11,
  	0,0,485,132,1,0,0,0,486,488,3,95,47,0,487,486,1,0,0,0,488,489,1,0,0,0,
  	489,487,1,0,0,0,489,490,1,0,0,0,490,134,1,0,0,0,491,493,7,12,0,0,492,
  	494,3,131,65,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,
  	3,133,66,0,496,136,1,0,0,0,497,499,3,117,58,0,498,497,1,0,0,0,499,500,
  	1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,138,1,0,0,0,502,505,8,13,
  	0,0,503,505,3,141,70,0,504,502,1,0,0,0,504,503,1,0,0,0,505,140,1,0,0,
  	0,506,511,3,143,71,0,507,511,3,145,72,0,508,511,3,147,73,0,509,511,3,
  	97,48,0,510,506,1,0,0,0,510,507,1,0,0,0,510,508,1,0,0,0,510,509,1,0,0,
  	0,511,142,1,0,0,0,512,513,5,92,0,0,513,514,7,14,0,0,514,144,1,0,0,0,515,
  	516,5,92,0,0,516,518,3,115,57,0,517,519,3,115,57,0,518,517,1,0,0,0,518,
  	519,1,0,0,0,519,521,1,0,0,0,520,522,3,115,57,0,521,520,1,0,0,0,521,522,
  	1,0,0,0,522,146,1,0,0,0,523,524,5,92,0,0,524,525,5,120,0,0,525,527,1,
  	0,0,0,526,528,3,117,58,0,527,526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,
  	0,0,529,530,1,0,0,0,530,148,1,0,0,0,531,532,5,35,0,0,532,533,5,100,0,
  	0,533,534,5,101,0,0,534,535,5,102,0,0,535,536,5,105,0,0,536,537,5,110,
  	0,0,537,538,5,101,0,0,538,550,1,0,0,0,539,541,8,15,0,0,540,539,1,0,0,
  	0,541,544,1,0,0,0,542,543,1,0,0,0,542,540,1,0,0,0,543,545,1,0,0,0,544,
  	542,1,0,0,0,545,547,5,92,0,0,546,548,5,13,0,0,547,546,1,0,0,0,547,548,
  	1,0,0,0,548,549,1,0,0,0,549,551,5,10,0,0,550,542,1,0,0,0,551,552,1,0,
  	0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,8,15,0,0,
  	555,554,1,0,0,0,556,557,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,150,
  	1,0,0,0,559,560,5,35,0,0,560,572,3,89,44,0,561,563,8,15,0,0,562,561,1,
  	0,0,0,563,566,1,0,0,0,564,565,1,0,0,0,564,562,1,0,0,0,565,567,1,0,0,0,
  	566,564,1,0,0,0,567,569,5,92,0,0,568,570,5,13,0,0,569,568,1,0,0,0,569,
  	570,1,0,0,0,570,571,1,0,0,0,571,573,5,10,0,0,572,564,1,0,0,0,573,574,
  	1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,578,8,15,
  	0,0,577,576,1,0,0,0,578,579,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,
  	581,1,0,0,0,581,582,6,75,0,0,582,152,1,0,0,0,583,584,5,35,0,0,584,585,
  	5,100,0,0,585,586,5,101,0,0,586,587,5,102,0,0,587,588,5,105,0,0,588,589,
  	5,110,0,0,589,590,5,101,0,0,590,594,1,0,0,0,591,593,8,15,0,0,592,591,
  	1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,154,1,0,0,
  	0,596,594,1,0,0,0,597,598,5,35,0,0,598,602,3,89,44,0,599,601,8,15,0,0,
  	600,599,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,605,
  	1,0,0,0,604,602,1,0,0,0,605,606,6,77,0,0,606,156,1,0,0,0,607,609,7,16,
  	0,0,608,607,1,0,0,0,609,610,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,
  	612,1,0,0,0,612,613,6,78,0,0,613,158,1,0,0,0,614,616,5,13,0,0,615,617,
  	5,10,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,620,1,0,0,0,618,620,5,10,
  	0,0,619,614,1,0,0,0,619,618,1,0,0,0,620,621,1,0,0,0,621,622,6,79,0,0,
  	622,160,1,0,0,0,623,625,5,92,0,0,624,626,7,17,0,0,625,624,1,0,0,0,625,
  	626,1,0,0,0,626,627,1,0,0,0,627,628,5,10,0,0,628,629,1,0,0,0,629,630,
  	6,80,0,0,630,162,1,0,0,0,631,632,5,47,0,0,632,633,5,42,0,0,633,637,1,
  	0,0,0,634,636,9,0,0,0,635,634,1,0,0,0,636,639,1,0,0,0,637,638,1,0,0,0,
  	637,635,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,5,42,0,0,641,
  	642,5,47,0,0,642,643,1,0,0,0,643,644,6,81,0,0,644,164,1,0,0,0,645,646,
  	5,47,0,0,646,647,5,47,0,0,647,651,1,0,0,0,648,650,8,18,0,0,649,648,1,
  	0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,
  	653,651,1,0,0,0,654,655,6,82,0,0,655,166,1,0,0,0,45,0,356,358,363,379,
  	388,392,396,403,410,416,423,430,443,450,454,456,466,469,476,480,489,493,
  	500,504,510,518,521,529,542,547,552,557,564,569,574,579,594,602,610,616,
  	619,625,637,651,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cstructlexerLexerStaticData = std::move(staticData);
}

}

CStructLexer::CStructLexer(CharStream *input) : Lexer(input) {
  CStructLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cstructlexerLexerStaticData->atn, cstructlexerLexerStaticData->decisionToDFA, cstructlexerLexerStaticData->sharedContextCache);
}

CStructLexer::~CStructLexer() {
  delete _interpreter;
}

std::string CStructLexer::getGrammarFileName() const {
  return "CStruct.g4";
}

const std::vector<std::string>& CStructLexer::getRuleNames() const {
  return cstructlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CStructLexer::getChannelNames() const {
  return cstructlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CStructLexer::getModeNames() const {
  return cstructlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CStructLexer::getVocabulary() const {
  return cstructlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CStructLexer::getSerializedATN() const {
  return cstructlexerLexerStaticData->serializedATN;
}

const atn::ATN& CStructLexer::getATN() const {
  return *cstructlexerLexerStaticData->atn;
}




void CStructLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cstructlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cstructlexerLexerOnceFlag, cstructlexerLexerInitialize);
#endif
}
