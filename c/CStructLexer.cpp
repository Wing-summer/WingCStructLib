
// Generated from ./CStruct.g4 by ANTLR 4.13.2


#include "CStructLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CStructLexerStaticData final {
  CStructLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CStructLexerStaticData(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData(CStructLexerStaticData&&) = delete;
  CStructLexerStaticData& operator=(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData& operator=(CStructLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cstructlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CStructLexerStaticData> cstructlexerLexerStaticData = nullptr;

void cstructlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cstructlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cstructlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CStructLexerStaticData>(
    std::vector<std::string>{
      "T__0", "Char", "Const", "Double", "Enum", "Float", "Int", "Long", 
      "TypeDef", "SizeOf", "Short", "Signed", "Struct", "Union", "Unsigned", 
      "Void", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "LeftShift", "RightShift", "Plus", "PlusPlus", 
      "Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "Caret", 
      "Tilde", "Colon", "Semi", "Comma", "Identifier", "IdentifierNondigit", 
      "Nondigit", "Digit", "HexQuad", "IntegerConstant", "BinaryConstant", 
      "DecimalConstant", "OctalConstant", "HexadecimalConstant", "HexadecimalPrefix", 
      "NonzeroDigit", "OctalDigit", "HexadecimalDigit", "IntegerSuffix", 
      "UnsignedSuffix", "LongSuffix", "LongLongSuffix", "FractionalConstant", 
      "ExponentPart", "Sign", "DigitSequence", "BinaryExponentPart", "HexadecimalDigitSequence", 
      "CChar", "EscapeSequence", "SimpleEscapeSequence", "OctalEscapeSequence", 
      "HexadecimalEscapeSequence", "MultiLineMacroDefine", "MultiLineMacro", 
      "DirectiveDefine", "Directive", "Whitespace", "Newline", "LINE_CONTINUATION", 
      "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'='", "'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", 
      "'long'", "'typedef'", "'sizeof'", "'short'", "'signed'", "'struct'", 
      "'union'", "'unsigned'", "'void'", "'('", "')'", "'['", "']'", "'{'", 
      "'}'", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
      "'%'", "'&'", "'|'", "'^'", "'~'", "':'", "';'", "','"
    },
    std::vector<std::string>{
      "", "", "Char", "Const", "Double", "Enum", "Float", "Int", "Long", 
      "TypeDef", "SizeOf", "Short", "Signed", "Struct", "Union", "Unsigned", 
      "Void", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "LeftShift", "RightShift", "Plus", "PlusPlus", 
      "Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "Caret", 
      "Tilde", "Colon", "Semi", "Comma", "Identifier", "IntegerConstant", 
      "MultiLineMacroDefine", "MultiLineMacro", "DirectiveDefine", "Directive", 
      "Whitespace", "Newline", "LINE_CONTINUATION", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,49,584,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,1,1,
  	1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
  	1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
  	7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
  	1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,
  	1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,38,1,38,1,38,5,38,300,8,38,10,38,12,38,303,9,38,1,39,
  	1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,3,43,318,
  	8,43,1,43,1,43,3,43,322,8,43,1,43,1,43,3,43,326,8,43,1,43,1,43,1,43,1,
  	43,1,43,3,43,333,8,43,1,44,1,44,1,44,4,44,338,8,44,11,44,12,44,339,1,
  	45,1,45,5,45,344,8,45,10,45,12,45,347,9,45,1,46,1,46,5,46,351,8,46,10,
  	46,12,46,354,9,46,1,47,1,47,4,47,358,8,47,11,47,12,47,359,1,48,1,48,1,
  	48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,3,52,373,8,52,1,52,1,52,1,
  	52,1,52,1,52,3,52,380,8,52,1,52,1,52,3,52,384,8,52,3,52,386,8,52,1,53,
  	1,53,1,54,1,54,1,55,1,55,1,55,1,55,3,55,396,8,55,1,56,3,56,399,8,56,1,
  	56,1,56,1,56,1,56,1,56,3,56,406,8,56,1,57,1,57,3,57,410,8,57,1,57,1,57,
  	1,58,1,58,1,59,4,59,417,8,59,11,59,12,59,418,1,60,1,60,3,60,423,8,60,
  	1,60,1,60,1,61,4,61,428,8,61,11,61,12,61,429,1,62,1,62,3,62,434,8,62,
  	1,63,1,63,1,63,3,63,439,8,63,1,64,1,64,1,64,1,65,1,65,1,65,3,65,447,8,
  	65,1,65,3,65,450,8,65,1,66,1,66,1,66,1,66,4,66,456,8,66,11,66,12,66,457,
  	1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,469,8,67,10,67,12,67,
  	472,9,67,1,67,1,67,3,67,476,8,67,1,67,4,67,479,8,67,11,67,12,67,480,1,
  	67,4,67,484,8,67,11,67,12,67,485,1,68,1,68,1,68,5,68,491,8,68,10,68,12,
  	68,494,9,68,1,68,1,68,3,68,498,8,68,1,68,4,68,501,8,68,11,68,12,68,502,
  	1,68,4,68,506,8,68,11,68,12,68,507,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
  	1,69,1,69,1,69,1,69,5,69,521,8,69,10,69,12,69,524,9,69,1,70,1,70,1,70,
  	5,70,529,8,70,10,70,12,70,532,9,70,1,70,1,70,1,71,4,71,537,8,71,11,71,
  	12,71,538,1,71,1,71,1,72,1,72,3,72,545,8,72,1,72,3,72,548,8,72,1,72,1,
  	72,1,73,1,73,3,73,554,8,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,5,
  	74,564,8,74,10,74,12,74,567,9,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,
  	75,1,75,5,75,578,8,75,10,75,12,75,581,9,75,1,75,1,75,3,470,492,565,0,
  	76,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
  	14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
  	51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
  	37,75,38,77,39,79,0,81,0,83,0,85,0,87,40,89,0,91,0,93,0,95,0,97,0,99,
  	0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,
  	0,125,0,127,0,129,0,131,0,133,0,135,41,137,42,139,43,141,44,143,45,145,
  	46,147,47,149,48,151,49,1,0,19,3,0,65,90,95,95,97,122,1,0,48,57,2,0,66,
  	66,98,98,1,0,48,49,2,0,88,88,120,120,1,0,49,57,1,0,48,55,3,0,48,57,65,
  	70,97,102,2,0,85,85,117,117,2,0,76,76,108,108,2,0,69,69,101,101,2,0,43,
  	43,45,45,2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,92,10,0,34,34,39,
  	39,63,63,92,92,97,98,102,102,110,110,114,114,116,116,118,118,1,0,10,10,
  	2,0,9,9,32,32,1,0,13,13,2,0,10,10,13,13,604,0,1,1,0,0,0,0,3,1,0,0,0,0,
  	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
  	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
  	0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
  	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
  	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
  	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
  	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,87,1,0,
  	0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
  	0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,1,153,1,0,
  	0,0,3,155,1,0,0,0,5,160,1,0,0,0,7,166,1,0,0,0,9,173,1,0,0,0,11,178,1,
  	0,0,0,13,184,1,0,0,0,15,188,1,0,0,0,17,193,1,0,0,0,19,201,1,0,0,0,21,
  	208,1,0,0,0,23,214,1,0,0,0,25,221,1,0,0,0,27,228,1,0,0,0,29,234,1,0,0,
  	0,31,243,1,0,0,0,33,248,1,0,0,0,35,250,1,0,0,0,37,252,1,0,0,0,39,254,
  	1,0,0,0,41,256,1,0,0,0,43,258,1,0,0,0,45,260,1,0,0,0,47,263,1,0,0,0,49,
  	266,1,0,0,0,51,268,1,0,0,0,53,271,1,0,0,0,55,273,1,0,0,0,57,276,1,0,0,
  	0,59,278,1,0,0,0,61,280,1,0,0,0,63,282,1,0,0,0,65,284,1,0,0,0,67,286,
  	1,0,0,0,69,288,1,0,0,0,71,290,1,0,0,0,73,292,1,0,0,0,75,294,1,0,0,0,77,
  	296,1,0,0,0,79,304,1,0,0,0,81,306,1,0,0,0,83,308,1,0,0,0,85,310,1,0,0,
  	0,87,332,1,0,0,0,89,334,1,0,0,0,91,341,1,0,0,0,93,348,1,0,0,0,95,355,
  	1,0,0,0,97,361,1,0,0,0,99,364,1,0,0,0,101,366,1,0,0,0,103,368,1,0,0,0,
  	105,385,1,0,0,0,107,387,1,0,0,0,109,389,1,0,0,0,111,395,1,0,0,0,113,405,
  	1,0,0,0,115,407,1,0,0,0,117,413,1,0,0,0,119,416,1,0,0,0,121,420,1,0,0,
  	0,123,427,1,0,0,0,125,433,1,0,0,0,127,438,1,0,0,0,129,440,1,0,0,0,131,
  	443,1,0,0,0,133,451,1,0,0,0,135,459,1,0,0,0,137,487,1,0,0,0,139,511,1,
  	0,0,0,141,525,1,0,0,0,143,536,1,0,0,0,145,547,1,0,0,0,147,551,1,0,0,0,
  	149,559,1,0,0,0,151,573,1,0,0,0,153,154,5,61,0,0,154,2,1,0,0,0,155,156,
  	5,99,0,0,156,157,5,104,0,0,157,158,5,97,0,0,158,159,5,114,0,0,159,4,1,
  	0,0,0,160,161,5,99,0,0,161,162,5,111,0,0,162,163,5,110,0,0,163,164,5,
  	115,0,0,164,165,5,116,0,0,165,6,1,0,0,0,166,167,5,100,0,0,167,168,5,111,
  	0,0,168,169,5,117,0,0,169,170,5,98,0,0,170,171,5,108,0,0,171,172,5,101,
  	0,0,172,8,1,0,0,0,173,174,5,101,0,0,174,175,5,110,0,0,175,176,5,117,0,
  	0,176,177,5,109,0,0,177,10,1,0,0,0,178,179,5,102,0,0,179,180,5,108,0,
  	0,180,181,5,111,0,0,181,182,5,97,0,0,182,183,5,116,0,0,183,12,1,0,0,0,
  	184,185,5,105,0,0,185,186,5,110,0,0,186,187,5,116,0,0,187,14,1,0,0,0,
  	188,189,5,108,0,0,189,190,5,111,0,0,190,191,5,110,0,0,191,192,5,103,0,
  	0,192,16,1,0,0,0,193,194,5,116,0,0,194,195,5,121,0,0,195,196,5,112,0,
  	0,196,197,5,101,0,0,197,198,5,100,0,0,198,199,5,101,0,0,199,200,5,102,
  	0,0,200,18,1,0,0,0,201,202,5,115,0,0,202,203,5,105,0,0,203,204,5,122,
  	0,0,204,205,5,101,0,0,205,206,5,111,0,0,206,207,5,102,0,0,207,20,1,0,
  	0,0,208,209,5,115,0,0,209,210,5,104,0,0,210,211,5,111,0,0,211,212,5,114,
  	0,0,212,213,5,116,0,0,213,22,1,0,0,0,214,215,5,115,0,0,215,216,5,105,
  	0,0,216,217,5,103,0,0,217,218,5,110,0,0,218,219,5,101,0,0,219,220,5,100,
  	0,0,220,24,1,0,0,0,221,222,5,115,0,0,222,223,5,116,0,0,223,224,5,114,
  	0,0,224,225,5,117,0,0,225,226,5,99,0,0,226,227,5,116,0,0,227,26,1,0,0,
  	0,228,229,5,117,0,0,229,230,5,110,0,0,230,231,5,105,0,0,231,232,5,111,
  	0,0,232,233,5,110,0,0,233,28,1,0,0,0,234,235,5,117,0,0,235,236,5,110,
  	0,0,236,237,5,115,0,0,237,238,5,105,0,0,238,239,5,103,0,0,239,240,5,110,
  	0,0,240,241,5,101,0,0,241,242,5,100,0,0,242,30,1,0,0,0,243,244,5,118,
  	0,0,244,245,5,111,0,0,245,246,5,105,0,0,246,247,5,100,0,0,247,32,1,0,
  	0,0,248,249,5,40,0,0,249,34,1,0,0,0,250,251,5,41,0,0,251,36,1,0,0,0,252,
  	253,5,91,0,0,253,38,1,0,0,0,254,255,5,93,0,0,255,40,1,0,0,0,256,257,5,
  	123,0,0,257,42,1,0,0,0,258,259,5,125,0,0,259,44,1,0,0,0,260,261,5,60,
  	0,0,261,262,5,60,0,0,262,46,1,0,0,0,263,264,5,62,0,0,264,265,5,62,0,0,
  	265,48,1,0,0,0,266,267,5,43,0,0,267,50,1,0,0,0,268,269,5,43,0,0,269,270,
  	5,43,0,0,270,52,1,0,0,0,271,272,5,45,0,0,272,54,1,0,0,0,273,274,5,45,
  	0,0,274,275,5,45,0,0,275,56,1,0,0,0,276,277,5,42,0,0,277,58,1,0,0,0,278,
  	279,5,47,0,0,279,60,1,0,0,0,280,281,5,37,0,0,281,62,1,0,0,0,282,283,5,
  	38,0,0,283,64,1,0,0,0,284,285,5,124,0,0,285,66,1,0,0,0,286,287,5,94,0,
  	0,287,68,1,0,0,0,288,289,5,126,0,0,289,70,1,0,0,0,290,291,5,58,0,0,291,
  	72,1,0,0,0,292,293,5,59,0,0,293,74,1,0,0,0,294,295,5,44,0,0,295,76,1,
  	0,0,0,296,301,3,79,39,0,297,300,3,79,39,0,298,300,3,83,41,0,299,297,1,
  	0,0,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,
  	302,78,1,0,0,0,303,301,1,0,0,0,304,305,3,81,40,0,305,80,1,0,0,0,306,307,
  	7,0,0,0,307,82,1,0,0,0,308,309,7,1,0,0,309,84,1,0,0,0,310,311,3,103,51,
  	0,311,312,3,103,51,0,312,313,3,103,51,0,313,314,3,103,51,0,314,86,1,0,
  	0,0,315,317,3,91,45,0,316,318,3,105,52,0,317,316,1,0,0,0,317,318,1,0,
  	0,0,318,333,1,0,0,0,319,321,3,93,46,0,320,322,3,105,52,0,321,320,1,0,
  	0,0,321,322,1,0,0,0,322,333,1,0,0,0,323,325,3,95,47,0,324,326,3,105,52,
  	0,325,324,1,0,0,0,325,326,1,0,0,0,326,333,1,0,0,0,327,333,3,89,44,0,328,
  	329,5,39,0,0,329,330,3,125,62,0,330,331,5,39,0,0,331,333,1,0,0,0,332,
  	315,1,0,0,0,332,319,1,0,0,0,332,323,1,0,0,0,332,327,1,0,0,0,332,328,1,
  	0,0,0,333,88,1,0,0,0,334,335,5,48,0,0,335,337,7,2,0,0,336,338,7,3,0,0,
  	337,336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,90,
  	1,0,0,0,341,345,3,99,49,0,342,344,3,83,41,0,343,342,1,0,0,0,344,347,1,
  	0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,92,1,0,0,0,347,345,1,0,0,0,
  	348,352,5,48,0,0,349,351,3,101,50,0,350,349,1,0,0,0,351,354,1,0,0,0,352,
  	350,1,0,0,0,352,353,1,0,0,0,353,94,1,0,0,0,354,352,1,0,0,0,355,357,3,
  	97,48,0,356,358,3,103,51,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,
  	0,0,0,359,360,1,0,0,0,360,96,1,0,0,0,361,362,5,48,0,0,362,363,7,4,0,0,
  	363,98,1,0,0,0,364,365,7,5,0,0,365,100,1,0,0,0,366,367,7,6,0,0,367,102,
  	1,0,0,0,368,369,7,7,0,0,369,104,1,0,0,0,370,372,3,107,53,0,371,373,3,
  	109,54,0,372,371,1,0,0,0,372,373,1,0,0,0,373,386,1,0,0,0,374,375,3,107,
  	53,0,375,376,3,111,55,0,376,386,1,0,0,0,377,379,3,109,54,0,378,380,3,
  	107,53,0,379,378,1,0,0,0,379,380,1,0,0,0,380,386,1,0,0,0,381,383,3,111,
  	55,0,382,384,3,107,53,0,383,382,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,
  	0,385,370,1,0,0,0,385,374,1,0,0,0,385,377,1,0,0,0,385,381,1,0,0,0,386,
  	106,1,0,0,0,387,388,7,8,0,0,388,108,1,0,0,0,389,390,7,9,0,0,390,110,1,
  	0,0,0,391,392,5,108,0,0,392,396,5,108,0,0,393,394,5,76,0,0,394,396,5,
  	76,0,0,395,391,1,0,0,0,395,393,1,0,0,0,396,112,1,0,0,0,397,399,3,119,
  	59,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,46,0,0,
  	401,406,3,119,59,0,402,403,3,119,59,0,403,404,5,46,0,0,404,406,1,0,0,
  	0,405,398,1,0,0,0,405,402,1,0,0,0,406,114,1,0,0,0,407,409,7,10,0,0,408,
  	410,3,117,58,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,
  	3,119,59,0,412,116,1,0,0,0,413,414,7,11,0,0,414,118,1,0,0,0,415,417,3,
  	83,41,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,
  	0,419,120,1,0,0,0,420,422,7,12,0,0,421,423,3,117,58,0,422,421,1,0,0,0,
  	422,423,1,0,0,0,423,424,1,0,0,0,424,425,3,119,59,0,425,122,1,0,0,0,426,
  	428,3,103,51,0,427,426,1,0,0,0,428,429,1,0,0,0,429,427,1,0,0,0,429,430,
  	1,0,0,0,430,124,1,0,0,0,431,434,8,13,0,0,432,434,3,127,63,0,433,431,1,
  	0,0,0,433,432,1,0,0,0,434,126,1,0,0,0,435,439,3,129,64,0,436,439,3,131,
  	65,0,437,439,3,133,66,0,438,435,1,0,0,0,438,436,1,0,0,0,438,437,1,0,0,
  	0,439,128,1,0,0,0,440,441,5,92,0,0,441,442,7,14,0,0,442,130,1,0,0,0,443,
  	444,5,92,0,0,444,446,3,101,50,0,445,447,3,101,50,0,446,445,1,0,0,0,446,
  	447,1,0,0,0,447,449,1,0,0,0,448,450,3,101,50,0,449,448,1,0,0,0,449,450,
  	1,0,0,0,450,132,1,0,0,0,451,452,5,92,0,0,452,453,5,120,0,0,453,455,1,
  	0,0,0,454,456,3,103,51,0,455,454,1,0,0,0,456,457,1,0,0,0,457,455,1,0,
  	0,0,457,458,1,0,0,0,458,134,1,0,0,0,459,460,5,35,0,0,460,461,5,100,0,
  	0,461,462,5,101,0,0,462,463,5,102,0,0,463,464,5,105,0,0,464,465,5,110,
  	0,0,465,466,5,101,0,0,466,478,1,0,0,0,467,469,8,15,0,0,468,467,1,0,0,
  	0,469,472,1,0,0,0,470,471,1,0,0,0,470,468,1,0,0,0,471,473,1,0,0,0,472,
  	470,1,0,0,0,473,475,5,92,0,0,474,476,5,13,0,0,475,474,1,0,0,0,475,476,
  	1,0,0,0,476,477,1,0,0,0,477,479,5,10,0,0,478,470,1,0,0,0,479,480,1,0,
  	0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,484,8,15,0,0,
  	483,482,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,136,
  	1,0,0,0,487,488,5,35,0,0,488,500,3,77,38,0,489,491,8,15,0,0,490,489,1,
  	0,0,0,491,494,1,0,0,0,492,493,1,0,0,0,492,490,1,0,0,0,493,495,1,0,0,0,
  	494,492,1,0,0,0,495,497,5,92,0,0,496,498,5,13,0,0,497,496,1,0,0,0,497,
  	498,1,0,0,0,498,499,1,0,0,0,499,501,5,10,0,0,500,492,1,0,0,0,501,502,
  	1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,506,8,15,
  	0,0,505,504,1,0,0,0,506,507,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,
  	509,1,0,0,0,509,510,6,68,0,0,510,138,1,0,0,0,511,512,5,35,0,0,512,513,
  	5,100,0,0,513,514,5,101,0,0,514,515,5,102,0,0,515,516,5,105,0,0,516,517,
  	5,110,0,0,517,518,5,101,0,0,518,522,1,0,0,0,519,521,8,15,0,0,520,519,
  	1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,140,1,0,0,
  	0,524,522,1,0,0,0,525,526,5,35,0,0,526,530,3,77,38,0,527,529,8,15,0,0,
  	528,527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,
  	1,0,0,0,532,530,1,0,0,0,533,534,6,70,0,0,534,142,1,0,0,0,535,537,7,16,
  	0,0,536,535,1,0,0,0,537,538,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,
  	540,1,0,0,0,540,541,6,71,0,0,541,144,1,0,0,0,542,544,5,13,0,0,543,545,
  	5,10,0,0,544,543,1,0,0,0,544,545,1,0,0,0,545,548,1,0,0,0,546,548,5,10,
  	0,0,547,542,1,0,0,0,547,546,1,0,0,0,548,549,1,0,0,0,549,550,6,72,0,0,
  	550,146,1,0,0,0,551,553,5,92,0,0,552,554,7,17,0,0,553,552,1,0,0,0,553,
  	554,1,0,0,0,554,555,1,0,0,0,555,556,5,10,0,0,556,557,1,0,0,0,557,558,
  	6,73,0,0,558,148,1,0,0,0,559,560,5,47,0,0,560,561,5,42,0,0,561,565,1,
  	0,0,0,562,564,9,0,0,0,563,562,1,0,0,0,564,567,1,0,0,0,565,566,1,0,0,0,
  	565,563,1,0,0,0,566,568,1,0,0,0,567,565,1,0,0,0,568,569,5,42,0,0,569,
  	570,5,47,0,0,570,571,1,0,0,0,571,572,6,74,0,0,572,150,1,0,0,0,573,574,
  	5,47,0,0,574,575,5,47,0,0,575,579,1,0,0,0,576,578,8,18,0,0,577,576,1,
  	0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,
  	581,579,1,0,0,0,582,583,6,75,0,0,583,152,1,0,0,0,43,0,299,301,317,321,
  	325,332,339,345,352,359,372,379,383,385,395,398,405,409,418,422,429,433,
  	438,446,449,457,470,475,480,485,492,497,502,507,522,530,538,544,547,553,
  	565,579,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cstructlexerLexerStaticData = std::move(staticData);
}

}

CStructLexer::CStructLexer(CharStream *input) : Lexer(input) {
  CStructLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cstructlexerLexerStaticData->atn, cstructlexerLexerStaticData->decisionToDFA, cstructlexerLexerStaticData->sharedContextCache);
}

CStructLexer::~CStructLexer() {
  delete _interpreter;
}

std::string CStructLexer::getGrammarFileName() const {
  return "CStruct.g4";
}

const std::vector<std::string>& CStructLexer::getRuleNames() const {
  return cstructlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CStructLexer::getChannelNames() const {
  return cstructlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CStructLexer::getModeNames() const {
  return cstructlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CStructLexer::getVocabulary() const {
  return cstructlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CStructLexer::getSerializedATN() const {
  return cstructlexerLexerStaticData->serializedATN;
}

const atn::ATN& CStructLexer::getATN() const {
  return *cstructlexerLexerStaticData->atn;
}




void CStructLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cstructlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cstructlexerLexerOnceFlag, cstructlexerLexerInitialize);
#endif
}
