
// Generated from ./CStruct.g4 by ANTLR 4.13.2


#include "CStructLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CStructLexerStaticData final {
  CStructLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CStructLexerStaticData(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData(CStructLexerStaticData&&) = delete;
  CStructLexerStaticData& operator=(const CStructLexerStaticData&) = delete;
  CStructLexerStaticData& operator=(CStructLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cstructlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<CStructLexerStaticData> cstructlexerLexerStaticData = nullptr;

void cstructlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cstructlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cstructlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CStructLexerStaticData>(
    std::vector<std::string>{
      "T__0", "Char", "Const", "Double", "Enum", "Float", "Int", "Long", 
      "TypeDef", "AlignAs", "SizeOf", "Short", "Signed", "Struct", "Union", 
      "Unsigned", "Void", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "LeftShift", "RightShift", "Plus", "PlusPlus", 
      "Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "Caret", 
      "Tilde", "Colon", "Semi", "Comma", "Identifier", "IdentifierNondigit", 
      "Nondigit", "Digit", "HexQuad", "IntegerConstant", "BinaryConstant", 
      "DecimalConstant", "OctalConstant", "HexadecimalConstant", "HexadecimalPrefix", 
      "NonzeroDigit", "OctalDigit", "HexadecimalDigit", "IntegerSuffix", 
      "UnsignedSuffix", "LongSuffix", "LongLongSuffix", "FractionalConstant", 
      "ExponentPart", "Sign", "DigitSequence", "BinaryExponentPart", "HexadecimalDigitSequence", 
      "StringLiteral", "SCharSequence", "CChar", "EscapeSequence", "SimpleEscapeSequence", 
      "OctalEscapeSequence", "HexadecimalEscapeSequence", "MultiLineMacroDefine", 
      "MultiLineMacro", "DirectiveInclude", "DirectiveDefine", "Directive", 
      "Whitespace", "Newline", "LINE_CONTINUATION", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'='", "'char'", "'const'", "'double'", "'enum'", "'float'", "'int'", 
      "'long'", "'typedef'", "'alignas'", "'sizeof'", "'short'", "'signed'", 
      "'struct'", "'union'", "'unsigned'", "'void'", "'('", "')'", "'['", 
      "']'", "'{'", "'}'", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", 
      "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'~'", "':'", "';'", "','"
    },
    std::vector<std::string>{
      "", "", "Char", "Const", "Double", "Enum", "Float", "Int", "Long", 
      "TypeDef", "AlignAs", "SizeOf", "Short", "Signed", "Struct", "Union", 
      "Unsigned", "Void", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "LeftShift", "RightShift", "Plus", "PlusPlus", 
      "Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "Caret", 
      "Tilde", "Colon", "Semi", "Comma", "Identifier", "IntegerConstant", 
      "StringLiteral", "MultiLineMacroDefine", "MultiLineMacro", "DirectiveInclude", 
      "DirectiveDefine", "Directive", "Whitespace", "Newline", "LINE_CONTINUATION", 
      "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,52,626,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
  	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,
  	1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,
  	1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,5,39,316,8,39,10,39,12,39,319,
  	9,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
  	3,44,334,8,44,1,44,1,44,3,44,338,8,44,1,44,1,44,3,44,342,8,44,1,44,1,
  	44,1,44,1,44,1,44,3,44,349,8,44,1,45,1,45,1,45,4,45,354,8,45,11,45,12,
  	45,355,1,46,1,46,5,46,360,8,46,10,46,12,46,363,9,46,1,47,1,47,5,47,367,
  	8,47,10,47,12,47,370,9,47,1,48,1,48,4,48,374,8,48,11,48,12,48,375,1,49,
  	1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,3,53,389,8,53,1,53,
  	1,53,1,53,1,53,1,53,3,53,396,8,53,1,53,1,53,3,53,400,8,53,3,53,402,8,
  	53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,3,56,412,8,56,1,57,3,57,415,
  	8,57,1,57,1,57,1,57,1,57,1,57,3,57,422,8,57,1,58,1,58,3,58,426,8,58,1,
  	58,1,58,1,59,1,59,1,60,4,60,433,8,60,11,60,12,60,434,1,61,1,61,3,61,439,
  	8,61,1,61,1,61,1,62,4,62,444,8,62,11,62,12,62,445,1,63,1,63,3,63,450,
  	8,63,1,63,1,63,1,64,4,64,455,8,64,11,64,12,64,456,1,65,1,65,3,65,461,
  	8,65,1,66,1,66,1,66,3,66,466,8,66,1,67,1,67,1,67,1,68,1,68,1,68,3,68,
  	474,8,68,1,68,3,68,477,8,68,1,69,1,69,1,69,1,69,4,69,483,8,69,11,69,12,
  	69,484,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,496,8,70,10,
  	70,12,70,499,9,70,1,70,1,70,3,70,503,8,70,1,70,4,70,506,8,70,11,70,12,
  	70,507,1,70,4,70,511,8,70,11,70,12,70,512,1,71,1,71,1,71,5,71,518,8,71,
  	10,71,12,71,521,9,71,1,71,1,71,3,71,525,8,71,1,71,4,71,528,8,71,11,71,
  	12,71,529,1,71,4,71,533,8,71,11,71,12,71,534,1,71,1,71,1,72,1,72,1,72,
  	1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,549,8,72,10,72,12,72,552,9,72,
  	1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,563,8,73,10,73,12,73,
  	566,9,73,1,74,1,74,1,74,5,74,571,8,74,10,74,12,74,574,9,74,1,74,1,74,
  	1,75,4,75,579,8,75,11,75,12,75,580,1,75,1,75,1,76,1,76,3,76,587,8,76,
  	1,76,3,76,590,8,76,1,76,1,76,1,77,1,77,3,77,596,8,77,1,77,1,77,1,77,1,
  	77,1,78,1,78,1,78,1,78,5,78,606,8,78,10,78,12,78,609,9,78,1,78,1,78,1,
  	78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,620,8,79,10,79,12,79,623,9,79,1,
  	79,1,79,3,497,519,607,0,80,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,0,83,0,85,0,87,0,89,41,
  	91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,
  	0,117,0,119,0,121,0,123,0,125,0,127,42,129,0,131,0,133,0,135,0,137,0,
  	139,0,141,43,143,44,145,45,147,46,149,47,151,48,153,49,155,50,157,51,
  	159,52,1,0,19,3,0,65,90,95,95,97,122,1,0,48,57,2,0,66,66,98,98,1,0,48,
  	49,2,0,88,88,120,120,1,0,49,57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,85,
  	85,117,117,2,0,76,76,108,108,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,
  	80,112,112,4,0,10,10,13,13,39,39,92,92,10,0,34,34,39,39,63,63,92,92,97,
  	98,102,102,110,110,114,114,116,116,118,118,1,0,10,10,2,0,9,9,32,32,1,
  	0,13,13,2,0,10,10,13,13,648,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
  	0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
  	0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
  	1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
  	0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
  	0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
  	1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
  	0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,89,1,0,0,0,
  	0,127,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,
  	0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,
  	0,159,1,0,0,0,1,161,1,0,0,0,3,163,1,0,0,0,5,168,1,0,0,0,7,174,1,0,0,0,
  	9,181,1,0,0,0,11,186,1,0,0,0,13,192,1,0,0,0,15,196,1,0,0,0,17,201,1,0,
  	0,0,19,209,1,0,0,0,21,217,1,0,0,0,23,224,1,0,0,0,25,230,1,0,0,0,27,237,
  	1,0,0,0,29,244,1,0,0,0,31,250,1,0,0,0,33,259,1,0,0,0,35,264,1,0,0,0,37,
  	266,1,0,0,0,39,268,1,0,0,0,41,270,1,0,0,0,43,272,1,0,0,0,45,274,1,0,0,
  	0,47,276,1,0,0,0,49,279,1,0,0,0,51,282,1,0,0,0,53,284,1,0,0,0,55,287,
  	1,0,0,0,57,289,1,0,0,0,59,292,1,0,0,0,61,294,1,0,0,0,63,296,1,0,0,0,65,
  	298,1,0,0,0,67,300,1,0,0,0,69,302,1,0,0,0,71,304,1,0,0,0,73,306,1,0,0,
  	0,75,308,1,0,0,0,77,310,1,0,0,0,79,312,1,0,0,0,81,320,1,0,0,0,83,322,
  	1,0,0,0,85,324,1,0,0,0,87,326,1,0,0,0,89,348,1,0,0,0,91,350,1,0,0,0,93,
  	357,1,0,0,0,95,364,1,0,0,0,97,371,1,0,0,0,99,377,1,0,0,0,101,380,1,0,
  	0,0,103,382,1,0,0,0,105,384,1,0,0,0,107,401,1,0,0,0,109,403,1,0,0,0,111,
  	405,1,0,0,0,113,411,1,0,0,0,115,421,1,0,0,0,117,423,1,0,0,0,119,429,1,
  	0,0,0,121,432,1,0,0,0,123,436,1,0,0,0,125,443,1,0,0,0,127,447,1,0,0,0,
  	129,454,1,0,0,0,131,460,1,0,0,0,133,465,1,0,0,0,135,467,1,0,0,0,137,470,
  	1,0,0,0,139,478,1,0,0,0,141,486,1,0,0,0,143,514,1,0,0,0,145,538,1,0,0,
  	0,147,553,1,0,0,0,149,567,1,0,0,0,151,578,1,0,0,0,153,589,1,0,0,0,155,
  	593,1,0,0,0,157,601,1,0,0,0,159,615,1,0,0,0,161,162,5,61,0,0,162,2,1,
  	0,0,0,163,164,5,99,0,0,164,165,5,104,0,0,165,166,5,97,0,0,166,167,5,114,
  	0,0,167,4,1,0,0,0,168,169,5,99,0,0,169,170,5,111,0,0,170,171,5,110,0,
  	0,171,172,5,115,0,0,172,173,5,116,0,0,173,6,1,0,0,0,174,175,5,100,0,0,
  	175,176,5,111,0,0,176,177,5,117,0,0,177,178,5,98,0,0,178,179,5,108,0,
  	0,179,180,5,101,0,0,180,8,1,0,0,0,181,182,5,101,0,0,182,183,5,110,0,0,
  	183,184,5,117,0,0,184,185,5,109,0,0,185,10,1,0,0,0,186,187,5,102,0,0,
  	187,188,5,108,0,0,188,189,5,111,0,0,189,190,5,97,0,0,190,191,5,116,0,
  	0,191,12,1,0,0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,
  	0,195,14,1,0,0,0,196,197,5,108,0,0,197,198,5,111,0,0,198,199,5,110,0,
  	0,199,200,5,103,0,0,200,16,1,0,0,0,201,202,5,116,0,0,202,203,5,121,0,
  	0,203,204,5,112,0,0,204,205,5,101,0,0,205,206,5,100,0,0,206,207,5,101,
  	0,0,207,208,5,102,0,0,208,18,1,0,0,0,209,210,5,97,0,0,210,211,5,108,0,
  	0,211,212,5,105,0,0,212,213,5,103,0,0,213,214,5,110,0,0,214,215,5,97,
  	0,0,215,216,5,115,0,0,216,20,1,0,0,0,217,218,5,115,0,0,218,219,5,105,
  	0,0,219,220,5,122,0,0,220,221,5,101,0,0,221,222,5,111,0,0,222,223,5,102,
  	0,0,223,22,1,0,0,0,224,225,5,115,0,0,225,226,5,104,0,0,226,227,5,111,
  	0,0,227,228,5,114,0,0,228,229,5,116,0,0,229,24,1,0,0,0,230,231,5,115,
  	0,0,231,232,5,105,0,0,232,233,5,103,0,0,233,234,5,110,0,0,234,235,5,101,
  	0,0,235,236,5,100,0,0,236,26,1,0,0,0,237,238,5,115,0,0,238,239,5,116,
  	0,0,239,240,5,114,0,0,240,241,5,117,0,0,241,242,5,99,0,0,242,243,5,116,
  	0,0,243,28,1,0,0,0,244,245,5,117,0,0,245,246,5,110,0,0,246,247,5,105,
  	0,0,247,248,5,111,0,0,248,249,5,110,0,0,249,30,1,0,0,0,250,251,5,117,
  	0,0,251,252,5,110,0,0,252,253,5,115,0,0,253,254,5,105,0,0,254,255,5,103,
  	0,0,255,256,5,110,0,0,256,257,5,101,0,0,257,258,5,100,0,0,258,32,1,0,
  	0,0,259,260,5,118,0,0,260,261,5,111,0,0,261,262,5,105,0,0,262,263,5,100,
  	0,0,263,34,1,0,0,0,264,265,5,40,0,0,265,36,1,0,0,0,266,267,5,41,0,0,267,
  	38,1,0,0,0,268,269,5,91,0,0,269,40,1,0,0,0,270,271,5,93,0,0,271,42,1,
  	0,0,0,272,273,5,123,0,0,273,44,1,0,0,0,274,275,5,125,0,0,275,46,1,0,0,
  	0,276,277,5,60,0,0,277,278,5,60,0,0,278,48,1,0,0,0,279,280,5,62,0,0,280,
  	281,5,62,0,0,281,50,1,0,0,0,282,283,5,43,0,0,283,52,1,0,0,0,284,285,5,
  	43,0,0,285,286,5,43,0,0,286,54,1,0,0,0,287,288,5,45,0,0,288,56,1,0,0,
  	0,289,290,5,45,0,0,290,291,5,45,0,0,291,58,1,0,0,0,292,293,5,42,0,0,293,
  	60,1,0,0,0,294,295,5,47,0,0,295,62,1,0,0,0,296,297,5,37,0,0,297,64,1,
  	0,0,0,298,299,5,38,0,0,299,66,1,0,0,0,300,301,5,124,0,0,301,68,1,0,0,
  	0,302,303,5,94,0,0,303,70,1,0,0,0,304,305,5,126,0,0,305,72,1,0,0,0,306,
  	307,5,58,0,0,307,74,1,0,0,0,308,309,5,59,0,0,309,76,1,0,0,0,310,311,5,
  	44,0,0,311,78,1,0,0,0,312,317,3,81,40,0,313,316,3,81,40,0,314,316,3,85,
  	42,0,315,313,1,0,0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,
  	317,318,1,0,0,0,318,80,1,0,0,0,319,317,1,0,0,0,320,321,3,83,41,0,321,
  	82,1,0,0,0,322,323,7,0,0,0,323,84,1,0,0,0,324,325,7,1,0,0,325,86,1,0,
  	0,0,326,327,3,105,52,0,327,328,3,105,52,0,328,329,3,105,52,0,329,330,
  	3,105,52,0,330,88,1,0,0,0,331,333,3,93,46,0,332,334,3,107,53,0,333,332,
  	1,0,0,0,333,334,1,0,0,0,334,349,1,0,0,0,335,337,3,95,47,0,336,338,3,107,
  	53,0,337,336,1,0,0,0,337,338,1,0,0,0,338,349,1,0,0,0,339,341,3,97,48,
  	0,340,342,3,107,53,0,341,340,1,0,0,0,341,342,1,0,0,0,342,349,1,0,0,0,
  	343,349,3,91,45,0,344,345,5,39,0,0,345,346,3,131,65,0,346,347,5,39,0,
  	0,347,349,1,0,0,0,348,331,1,0,0,0,348,335,1,0,0,0,348,339,1,0,0,0,348,
  	343,1,0,0,0,348,344,1,0,0,0,349,90,1,0,0,0,350,351,5,48,0,0,351,353,7,
  	2,0,0,352,354,7,3,0,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,
  	355,356,1,0,0,0,356,92,1,0,0,0,357,361,3,101,50,0,358,360,3,85,42,0,359,
  	358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,94,1,
  	0,0,0,363,361,1,0,0,0,364,368,5,48,0,0,365,367,3,103,51,0,366,365,1,0,
  	0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,96,1,0,0,0,370,
  	368,1,0,0,0,371,373,3,99,49,0,372,374,3,105,52,0,373,372,1,0,0,0,374,
  	375,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,98,1,0,0,0,377,378,5,
  	48,0,0,378,379,7,4,0,0,379,100,1,0,0,0,380,381,7,5,0,0,381,102,1,0,0,
  	0,382,383,7,6,0,0,383,104,1,0,0,0,384,385,7,7,0,0,385,106,1,0,0,0,386,
  	388,3,109,54,0,387,389,3,111,55,0,388,387,1,0,0,0,388,389,1,0,0,0,389,
  	402,1,0,0,0,390,391,3,109,54,0,391,392,3,113,56,0,392,402,1,0,0,0,393,
  	395,3,111,55,0,394,396,3,109,54,0,395,394,1,0,0,0,395,396,1,0,0,0,396,
  	402,1,0,0,0,397,399,3,113,56,0,398,400,3,109,54,0,399,398,1,0,0,0,399,
  	400,1,0,0,0,400,402,1,0,0,0,401,386,1,0,0,0,401,390,1,0,0,0,401,393,1,
  	0,0,0,401,397,1,0,0,0,402,108,1,0,0,0,403,404,7,8,0,0,404,110,1,0,0,0,
  	405,406,7,9,0,0,406,112,1,0,0,0,407,408,5,108,0,0,408,412,5,108,0,0,409,
  	410,5,76,0,0,410,412,5,76,0,0,411,407,1,0,0,0,411,409,1,0,0,0,412,114,
  	1,0,0,0,413,415,3,121,60,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,
  	0,0,0,416,417,5,46,0,0,417,422,3,121,60,0,418,419,3,121,60,0,419,420,
  	5,46,0,0,420,422,1,0,0,0,421,414,1,0,0,0,421,418,1,0,0,0,422,116,1,0,
  	0,0,423,425,7,10,0,0,424,426,3,119,59,0,425,424,1,0,0,0,425,426,1,0,0,
  	0,426,427,1,0,0,0,427,428,3,121,60,0,428,118,1,0,0,0,429,430,7,11,0,0,
  	430,120,1,0,0,0,431,433,3,85,42,0,432,431,1,0,0,0,433,434,1,0,0,0,434,
  	432,1,0,0,0,434,435,1,0,0,0,435,122,1,0,0,0,436,438,7,12,0,0,437,439,
  	3,119,59,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,441,3,
  	121,60,0,441,124,1,0,0,0,442,444,3,105,52,0,443,442,1,0,0,0,444,445,1,
  	0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,126,1,0,0,0,447,449,5,34,0,
  	0,448,450,3,129,64,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,
  	451,452,5,34,0,0,452,128,1,0,0,0,453,455,3,131,65,0,454,453,1,0,0,0,455,
  	456,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,130,1,0,0,0,458,461,8,
  	13,0,0,459,461,3,133,66,0,460,458,1,0,0,0,460,459,1,0,0,0,461,132,1,0,
  	0,0,462,466,3,135,67,0,463,466,3,137,68,0,464,466,3,139,69,0,465,462,
  	1,0,0,0,465,463,1,0,0,0,465,464,1,0,0,0,466,134,1,0,0,0,467,468,5,92,
  	0,0,468,469,7,14,0,0,469,136,1,0,0,0,470,471,5,92,0,0,471,473,3,103,51,
  	0,472,474,3,103,51,0,473,472,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,
  	475,477,3,103,51,0,476,475,1,0,0,0,476,477,1,0,0,0,477,138,1,0,0,0,478,
  	479,5,92,0,0,479,480,5,120,0,0,480,482,1,0,0,0,481,483,3,105,52,0,482,
  	481,1,0,0,0,483,484,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,140,1,
  	0,0,0,486,487,5,35,0,0,487,488,5,100,0,0,488,489,5,101,0,0,489,490,5,
  	102,0,0,490,491,5,105,0,0,491,492,5,110,0,0,492,493,5,101,0,0,493,505,
  	1,0,0,0,494,496,8,15,0,0,495,494,1,0,0,0,496,499,1,0,0,0,497,498,1,0,
  	0,0,497,495,1,0,0,0,498,500,1,0,0,0,499,497,1,0,0,0,500,502,5,92,0,0,
  	501,503,5,13,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,
  	506,5,10,0,0,505,497,1,0,0,0,506,507,1,0,0,0,507,505,1,0,0,0,507,508,
  	1,0,0,0,508,510,1,0,0,0,509,511,8,15,0,0,510,509,1,0,0,0,511,512,1,0,
  	0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,142,1,0,0,0,514,515,5,35,0,0,
  	515,527,3,79,39,0,516,518,8,15,0,0,517,516,1,0,0,0,518,521,1,0,0,0,519,
  	520,1,0,0,0,519,517,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,524,5,
  	92,0,0,523,525,5,13,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,
  	0,526,528,5,10,0,0,527,519,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,
  	530,1,0,0,0,530,532,1,0,0,0,531,533,8,15,0,0,532,531,1,0,0,0,533,534,
  	1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,537,6,71,
  	0,0,537,144,1,0,0,0,538,539,5,35,0,0,539,540,5,105,0,0,540,541,5,110,
  	0,0,541,542,5,99,0,0,542,543,5,108,0,0,543,544,5,117,0,0,544,545,5,100,
  	0,0,545,546,5,101,0,0,546,550,1,0,0,0,547,549,8,15,0,0,548,547,1,0,0,
  	0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,146,1,0,0,0,552,
  	550,1,0,0,0,553,554,5,35,0,0,554,555,5,100,0,0,555,556,5,101,0,0,556,
  	557,5,102,0,0,557,558,5,105,0,0,558,559,5,110,0,0,559,560,5,101,0,0,560,
  	564,1,0,0,0,561,563,8,15,0,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,
  	1,0,0,0,564,565,1,0,0,0,565,148,1,0,0,0,566,564,1,0,0,0,567,568,5,35,
  	0,0,568,572,3,79,39,0,569,571,8,15,0,0,570,569,1,0,0,0,571,574,1,0,0,
  	0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,572,1,0,0,0,575,
  	576,6,74,0,0,576,150,1,0,0,0,577,579,7,16,0,0,578,577,1,0,0,0,579,580,
  	1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,583,6,75,
  	0,0,583,152,1,0,0,0,584,586,5,13,0,0,585,587,5,10,0,0,586,585,1,0,0,0,
  	586,587,1,0,0,0,587,590,1,0,0,0,588,590,5,10,0,0,589,584,1,0,0,0,589,
  	588,1,0,0,0,590,591,1,0,0,0,591,592,6,76,0,0,592,154,1,0,0,0,593,595,
  	5,92,0,0,594,596,7,17,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,
  	0,0,597,598,5,10,0,0,598,599,1,0,0,0,599,600,6,77,0,0,600,156,1,0,0,0,
  	601,602,5,47,0,0,602,603,5,42,0,0,603,607,1,0,0,0,604,606,9,0,0,0,605,
  	604,1,0,0,0,606,609,1,0,0,0,607,608,1,0,0,0,607,605,1,0,0,0,608,610,1,
  	0,0,0,609,607,1,0,0,0,610,611,5,42,0,0,611,612,5,47,0,0,612,613,1,0,0,
  	0,613,614,6,78,0,0,614,158,1,0,0,0,615,616,5,47,0,0,616,617,5,47,0,0,
  	617,621,1,0,0,0,618,620,8,18,0,0,619,618,1,0,0,0,620,623,1,0,0,0,621,
  	619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,624,625,6,
  	79,0,0,625,160,1,0,0,0,46,0,315,317,333,337,341,348,355,361,368,375,388,
  	395,399,401,411,414,421,425,434,438,445,449,456,460,465,473,476,484,497,
  	502,507,512,519,524,529,534,550,564,572,580,586,589,595,607,621,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cstructlexerLexerStaticData = std::move(staticData);
}

}

CStructLexer::CStructLexer(CharStream *input) : Lexer(input) {
  CStructLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cstructlexerLexerStaticData->atn, cstructlexerLexerStaticData->decisionToDFA, cstructlexerLexerStaticData->sharedContextCache);
}

CStructLexer::~CStructLexer() {
  delete _interpreter;
}

std::string CStructLexer::getGrammarFileName() const {
  return "CStruct.g4";
}

const std::vector<std::string>& CStructLexer::getRuleNames() const {
  return cstructlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CStructLexer::getChannelNames() const {
  return cstructlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CStructLexer::getModeNames() const {
  return cstructlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CStructLexer::getVocabulary() const {
  return cstructlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CStructLexer::getSerializedATN() const {
  return cstructlexerLexerStaticData->serializedATN;
}

const atn::ATN& CStructLexer::getATN() const {
  return *cstructlexerLexerStaticData->atn;
}




void CStructLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cstructlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cstructlexerLexerOnceFlag, cstructlexerLexerInitialize);
#endif
}
